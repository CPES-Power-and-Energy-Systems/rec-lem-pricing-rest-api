openapi: "3.1.0"
info:
  title: REC LEM prices API
  description: REST API for computing local energy market (LEM) prices for a Renewable Energy Community (REC).
  version: 0.1.0
paths:
  /vanilla/{pricing_mechanism}:
    post:
      tags:
        - Calculate LEM Prices
      summary: Vanilla
      description: Compute a LEM prices' array based on the chosen pricing mechanism. <br />No MILP is solved, the LEM offers are constructed based only on the members' historical or estimated net consumption and respective opportunity costs.
      operationId: vanilla_vanilla__pricing_mechanism__post
      parameters:
        - name: pricing_mechanism
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PricingMechanism'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserParams'
      responses:
        '202':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /dual:
    post:
      tags:
        - Calculate LEM Prices
      summary: Dual
      description: Compute a LEM prices' array by running a purely collective post-delivery MILP where the shadow prices of a LEM equilibrium constraint are returned as the optimal LEM prices
      operationId: dual_dual_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MILPUserParams'
        required: true
      responses:
        '202':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /loop/{pricing_mechanism}:
    post:
      tags:
        - Calculate LEM Prices
      summary: Loop
      description: Compute a LEM prices' array by running an overarching iterative algorithm where successive two-stage MILP are solved for the post-delivery timeframe until a stopping criterion is met. Each two-stage MILP procedure is run considering LEM prices calculated under the pricing mechanism defined by the user, where offers are constructed based on the resulting net loads resulting from the previous MILP solved.
      operationId: loop_loop__pricing_mechanism__post
      parameters:
        - name: pricing_mechanism
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/PricingMechanism'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MILPUserParams'
      responses:
        '202':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceptedResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /get_prices/{order_id}:
    get:
      tags:
        - Retrieve LEM Prices
      summary: Get Prices
      description: Endpoint for retrieving a request results', provided the order ID.
      operationId: get_prices_get_prices__order_id__get
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            title: Order Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProcessed'
        '202':
          description: Order found but not yet processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotProcessed'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderNotFound'
        '412':
          description: One or more member IDs not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberIDNotFound'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    AcceptedResponse:
      properties:
        message:
          type: string
          title: Message
          examples:
            - Processing has started. Use the order ID for status updates.
        order_id:
          type: string
          title: Order Id
          description: Order identifier for the request. <br />Request results via REST API can only be retrieved by specifying this identifier.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - order_id
      title: AcceptedResponse
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    LemOrganization:
      type: string
      enum:
        - pool
        - bilateral
      title: LemOrganization
    LemPrice:
      properties:
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
        value:
          type: number
          minimum: 0
          title: Value
          description: Local energy market price computed, in â‚¬/kWh.
      type: object
      required:
        - datetime
        - value
      title: LemPrice
    MILPUserParams:
      properties:
        start_datetime:
          type: string
          format: date-time
          title: Start Datetime
          description: Start datetime for the price calculation horizon (included in it) in ISO 8601 format.
        end_datetime:
          type: string
          format: date-time
          title: End Datetime
          description: End datetime for the price calculation horizon (included in it) in ISO 8601 format.
        sdr_compensation:
          anyOf:
            - type: number
              maximum: 1
              minimum: 0
            - type: 'null'
          title: Sdr Compensation
          description: Only considered when choosing "sdr" as the pricing mechanism. <br />Defines a compensation between 0.0 and 1.0 allowing the user to set an incentive for internal trades whenever the REC has a net surplus.
          default: 0
        mmr_divisor:
          anyOf:
            - type: integer
              exclusiveMinimum: 0
            - type: 'null'
          title: Mmr Divisor
          description: Only considered when choosing "mmr" as the pricing mechanism. <br />Defines the divisor considered on the MMR expression. Values greater than 2 will favor buyers and values smaller than 2 will favor sellers.
          default: 2
        member_ids:
          items:
            type: string
          type: array
          uniqueItems: true
          title: Member Ids
          description: An array of strings that unequivocally identifies the members to be included in the REC. <br />All registered assets (i.e., meter ids) belonging totally or partially to the members listed, will be considered in the following computations.
          examples:
            - - Member#1
              - Member#2
        lem_organization:
          anyOf:
            - $ref: '#/components/schemas/LemOrganization'
            - type: 'null'
          description: Type of local energy market organization. Defines how transactions between members take place, either in a pool fashion (i.e., only total energy sold and bought is defined per meter ID) or through the establishment of bilateral agreements.
          default: pool
        contracted_power_penalty:
          anyOf:
            - type: number
              minimum: 0
            - type: 'null'
          title: Contracted Power Penalty
          description: A fictitious penalty for overlapping the contracted power at any given instant in the meters. <br />The default value is big enough to consider that overlapping is not possible.
          default: 1000
        enforce_positive_ac:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Enforce Positive Ac
          description: Under Portuguese legislation, it is required that the allocation coefficients that define energy transactions in a local energy market are strictly positive. By setting this parameter to True, the user explicits that such restriction must be considered in the MILP to be solved.
          default: true
        apply_storage_deg_cost:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Apply Storage Deg Cost
          description: If the user desires, a price can be applied for BESS degradation in the MILP solved. It will be applicable to all energy discharged from the assets. <br />The price is specific for each BESS asset and will only be applied if it is available in the respective database (possibly defined during the asset's registration).
          default: false
      type: object
      required:
        - start_datetime
        - end_datetime
        - member_ids
      title: MILPUserParams
    MemberIDNotFound:
      properties:
        message:
          type: string
          title: Message
          examples:
            - One or more member IDs not found on registry system.
        order_id:
          type: string
          maxLength: 45
          minLength: 45
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - order_id
      title: MemberIDNotFound
    Offer:
      properties:
        datetime:
          type: string
          format: date-time
          title: Datetime
          description: Datetime in ISO 8601 format.
        member_id:
          type: string
          title: Member Id
          description: The string that unequivocally identifies the member of the REC that has ownserhip over the meter making the offer.
          examples:
            - Member#1
        meter_id:
          type: string
          title: Meter Id
          description: The string that unequivocally identifies the meter of the REC that made the offer.
          examples:
            - Meter#1
        amount:
          type: number
          minimum: 0
          title: Amount
          description: Amount offered in the session, in kWh.
        value:
          type: number
          minimum: 0
          title: Value
          description: Price offered in the session, in â‚¬/kwh.
        type:
          allOf:
            - $ref: '#/components/schemas/OfferType'
          description: Indicates if it is a buying or selling offer.
        amount_origin:
          allOf:
            - $ref: '#/components/schemas/OfferOrigin'
          description: Indicates if the amount of the offer is based on **registered** data or, when the same is not available for this particular meter, if it came from **default** databases. <br />For buying offers, the default database used for the meter's load profile is the portuguese DSO E-Redes [typical consumption profiles](https://www.e-redes.pt/pt-pt/perfis-de-consumo). <br />For selling offers, the default database used for the meter's generation profile (assumed to be entirely composed of PV generation) is [PVGIS](https://re.jrc.ec.europa.eu/pvg_tools/en/).
        value_origin:
          allOf:
            - $ref: '#/components/schemas/OfferOrigin'
          description: Indicates if the value of the offer is based on **registered** data or, when the same is not available for this particular meter, if it came from **default** databases. <br />The default values used are the regulated prices published by the portuguese energy services regulator entity.[ERSE](https://www.erse.pt/atividade/regulacao/tarifas-e-precos-eletricidade/).
      type: object
      required:
        - datetime
        - member_id
        - meter_id
        - amount
        - value
        - type
        - amount_origin
        - value_origin
      title: Offer
    OfferOrigin:
      type: string
      enum:
        - registered
        - default
      title: OfferOrigin
    OfferType:
      type: string
      enum:
        - buy
        - sell
      title: OfferType
    OrderNotFound:
      properties:
        message:
          type: string
          title: Message
          examples:
            - Order not found.
        order_id:
          type: string
          maxLength: 45
          minLength: 45
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - order_id
      title: OrderNotFound
    OrderNotProcessed:
      properties:
        message:
          type: string
          title: Message
          examples:
            - Order found, but not yet processed. Please try again later.
        order_id:
          type: string
          maxLength: 45
          minLength: 45
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
      type: object
      required:
        - message
        - order_id
      title: OrderNotProcessed
    OrderProcessed:
      properties:
        order_id:
          type: string
          maxLength: 45
          minLength: 45
          title: Order Id
          description: Order identifier for the request.
          examples:
            - iaMiULXA9BktPUu2b_PwTtycCSNe0_wYpPt9muwlEtgL49GDg-kggSktAjtu
        lem_prices:
          items:
            $ref: '#/components/schemas/LemPrice'
          type: array
          title: Lem Prices
          description: List with the local energy market prices computed for the requested horizon.
        offers:
          items:
            $ref: '#/components/schemas/Offer'
          type: array
          title: Offers
          description: A description of all the offers considered in the local energy market session that resulted in the calculated price.
      type: object
      required:
        - order_id
        - lem_prices
        - offers
      title: OrderProcessed
    PricingMechanism:
      type: string
      enum:
        - crossing_value
        - mmr
        - sdr
      title: PricingMechanism
    UserParams:
      properties:
        start_datetime:
          type: string
          format: date-time
          title: Start Datetime
          description: Start datetime for the price calculation horizon (included in it) in ISO 8601 format.
        end_datetime:
          type: string
          format: date-time
          title: End Datetime
          description: End datetime for the price calculation horizon (included in it) in ISO 8601 format.
        sdr_compensation:
          anyOf:
            - type: number
              maximum: 1
              minimum: 0
            - type: 'null'
          title: Sdr Compensation
          description: Only considered when choosing "sdr" as the pricing mechanism. <br />Defines a compensation between 0.0 and 1.0 allowing the user to set an incentive for internal trades whenever the REC has a net surplus.
          default: 0
        mmr_divisor:
          anyOf:
            - type: integer
              exclusiveMinimum: 0
            - type: 'null'
          title: Mmr Divisor
          description: Only considered when choosing "mmr" as the pricing mechanism. <br />Defines the divisor considered on the MMR expression. Values greater than 2 will favor buyers and values smaller than 2 will favor sellers.
          default: 2
        member_ids:
          items:
            type: string
          type: array
          uniqueItems: true
          title: Member Ids
          description: An array of strings that unequivocally identifies the members to be included in the REC. <br />All registered assets (i.e., meter ids) belonging totally or partially to the members listed, will be considered in the following computations.
          examples:
            - - Member#1
              - Member#2
      type: object
      required:
        - start_datetime
        - end_datetime
        - member_ids
      title: UserParams
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError